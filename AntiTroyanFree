import os
import shutil
import hashlib
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import psutil
import requests
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å –≤–∞—à–∏–º API-–∫–ª—é—á–æ–º)
CONFIG = {
    "VIRUSTOTAL_API_KEY": "89c0ee11d8fcbcea21f3780f5cce8a1e13862ef85fc6c116ac767582d237fa7a",
    "QUARANTINE_FOLDER": "AT_Free_Quarantine",
    "LOG_FILE": "at_free_log.txt",
    "MAX_SCAN_FILES": 5000  # –õ–∏–º–∏—Ç –¥–ª—è Free-–≤–µ—Ä—Å—É–∏–∏
}

class AntiTroyanFree:
    def __init__(self):
        self.setup_dirs()
        self.known_malware = self.load_malware_db()
        self.running = False

    def setup_dirs(self):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏"""
        try:
            os.makedirs(CONFIG["QUARANTINE_FOLDER"], exist_ok=True)
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")

    def load_malware_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É —Å–∏–≥–Ω–∞—Ç—É—Ä"""
        return {
            "d41d8cd98f00b204e9800998ecf8427e": "TestVirus.exe",
            "a94a8fe5ccb19ba61c4c0873d391e987": "Backdoor.Win32"
        }

    def fast_scan(self, path="C:\\"):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"""
        found = []
        scanned = 0
        
        for root, _, files in os.walk(path):
            for file in files:
                if scanned >= CONFIG["MAX_SCAN_FILES"]:
                    break
                    
                file_path = os.path.join(root, file)
                if self.check_file(file_path):
                    found.append(file_path)
                scanned += 1
                
        return found

    def check_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —É–≥—Ä–æ–∑—ã"""
        try:
            if not os.path.exists(file_path):
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º
            file_hash = self.get_file_hash(file_path)
            if file_hash in self.known_malware:
                return True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal (–µ—Å–ª–∏ API –∫–ª—é—á –µ—Å—Ç—å)
            if CONFIG["VIRUSTOTAL_API_KEY"]:
                vt_result = self.check_virustotal(file_hash)
                if vt_result and vt_result.get('malicious', 0) > 0:
                    return True

            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
            ext = os.path.splitext(file_path)[1].lower()
            if ext in ('.exe', '.bat', '.vbs', '.ps1'):
                file_size = os.path.getsize(file_path)
                if file_size > 50 * 1024 * 1024:  # >50MB = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                    return True

            return False
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False

    def get_file_hash(self, file_path):
        """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, "rb") as f:
                return hashlib.md5(f.read()).hexdigest()
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è {file_path}: {e}")
            return ""

    def check_virustotal(self, file_hash):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ VirusTotal API"""
        if not file_hash or not CONFIG["VIRUSTOTAL_API_KEY"]:
            return None

        url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        headers = {"x-apikey": CONFIG["VIRUSTOTAL_API_KEY"]}

        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                return response.json().get('data', {}).get('attributes', {})
        except Exception as e:
            self.log_error(f"VirusTotal error: {e}")
        return None

    def quarantine_file(self, file_path):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω"""
        try:
            if not os.path.exists(file_path):
                return False

            filename = os.path.basename(file_path)
            quarantine_path = os.path.join(CONFIG["QUARANTINE_FOLDER"], filename)
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
            counter = 1
            while os.path.exists(quarantine_path):
                name, ext = os.path.splitext(filename)
                quarantine_path = os.path.join(
                    CONFIG["QUARANTINE_FOLDER"], 
                    f"{name}_{counter}{ext}"
                )
                counter += 1

            shutil.move(file_path, quarantine_path)
            return True
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: {e}")
            return False

    def log_error(self, message):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(CONFIG["LOG_FILE"], "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] ERROR: {message}\n")

class FreeUI:
    def __init__(self, root):
        self.root = root
        self.core = AntiTroyanFree()
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.root.title("AntiTroyan Free")
        self.root.geometry("900x650")
        
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.configure("TFrame", background="#f0f0f0")
        style.configure("TButton", padding=6, font=('Arial', 10))

        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        frame = ttk.Frame(self.root)
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(frame)
        control_frame.pack(fill=tk.X, pady=5)

        self.scan_btn = ttk.Button(
            control_frame, 
            text="–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (C:\\)",
            command=self.start_scan
        )
        self.scan_btn.pack(side=tk.LEFT, padx=5)

        self.status_label = ttk.Label(control_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.pack(side=tk.RIGHT, padx=5)

        # –õ–æ–≥
        self.log = scrolledtext.ScrolledText(
            frame,
            wrap=tk.WORD,
            width=100,
            height=30,
            font=('Consolas', 9)
        )
        self.log.pack(fill=tk.BOTH, expand=True)

    def start_scan(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.scan_btn.config(state=tk.DISABLED)
        self.status_label.config(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        self.log.insert(tk.END, "üîÑ –ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")

        def scan_thread():
            try:
                found = self.core.fast_scan()
                
                if found:
                    self.log.insert(tk.END, f"üö® –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑: {len(found)}\n")
                    for file in found:
                        self.log.insert(tk.END, f"‚Ä¢ {file}\n")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                        self.root.after(0, self.ask_quarantine, file)
                else:
                    self.log.insert(tk.END, "‚úÖ –£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")
                
                self.root.after(0, self.scan_complete)
            except Exception as e:
                self.log.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}\n")
                self.root.after(0, self.scan_complete)

        threading.Thread(target=scan_thread, daemon=True).start()

    def ask_quarantine(self, file_path):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ"""
        filename = os.path.basename(file_path)
        if messagebox.askyesno(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞",
            f"–§–∞–π–ª {filename} –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–µ–Ω.\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω?"
        ):
            if self.core.quarantine_file(file_path):
                self.log.insert(tk.END, f"‚úì –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω\n")
            else:
                self.log.insert(tk.END, f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª\n")

    def scan_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_btn.config(state=tk.NORMAL)
        self.status_label.config(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        self.log.see(tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = FreeUI(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
    window_width = 900
    window_height = 650
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width // 2) - (window_width // 2)
    y = (screen_height // 2) - (window_height // 2)
    root.geometry(f"{window_width}x{window_height}+{x}+{y}")
    
    root.mainloop()
